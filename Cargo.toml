[package]
name = "cj_ascii"
version = "0.1.4"
edition = "2021"
description = "A library for working with ASCII strings in Rust"
keywords = ["ascii", "strings", "serialization", "stream", "async"]
categories = ["encoding", "parsing", "asynchronous"]
repository = "https://github.com/cubicle-jockey/cj_ascii"
homepage = "https://github.com/cubicle-jockey/cj_ascii"
license = "MIT OR Apache-2.0"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html
[lib]
name = "cj_ascii"
path = "src/lib.rs"

#[[bin]]
#name = "cj_ascii"
#path = "src/_main.rs"

# these flags provide the best performance possible, resulting in AnsiString methods that are roughly 2x faster than the String equivalents
[profile.release]  # _main testing
lto = true         # huge performance boost (for some methods)
opt-level = 3      # default
debug = false      # default
codegen-units = 1  # huge performance boost, especially for closures
#panic = "abort"   # minor performance boost, but mostly makes the binary smaller
#strip = true      # minor performance boost(if any), but mostly makes the binary smaller


[dependencies]
futures = {version = "0.3.28", optional = true }
serde = { version = "1.0", features = ["derive"], optional = true }
#_main testing
#tokio = { version = "1.13", features = ["macros","rt","fs","sync","io-util"] }
#tokio-util = { version = "0.7.8", features = ["compat"] }


[features]
default = ["async"]
serialize = ["serde"]
async = ["futures"]

[dev-dependencies]
serde_json = "1.0"
#for async doc tests
tokio = { version = "1.13", features = ["macros","rt","fs"] }
#for async doc tests tokio examples
tokio-util = { version = "0.7.8", features = ["compat"] }


